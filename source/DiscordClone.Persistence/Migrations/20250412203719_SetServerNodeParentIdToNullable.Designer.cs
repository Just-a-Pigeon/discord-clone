// <auto-generated />
using System;
using DiscordClone.Domain.Entities.Consultation.ServerEntities;
using DiscordClone.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DiscordClone.Persistence.Migrations
{
    [DbContext(typeof(DiscordCloneContext))]
    [Migration("20250412203719_SetServerNodeParentIdToNullable")]
    partial class SetServerNodeParentIdToNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DiscordClone.Domain.Entities.Consultation.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<Guid?>("ServerId")
                        .HasColumnType("uuid")
                        .HasColumnName("server_id");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("ServerId")
                        .HasDatabaseName("ix_asp_net_users_server_id");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Domain.Entities.Consultation.Friendship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DateOfFriendship")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_friendship");

                    b.Property<Guid>("FriendId")
                        .HasColumnType("uuid")
                        .HasColumnName("friend_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_friendships");

                    b.HasIndex("FriendId")
                        .HasDatabaseName("ix_friendships_friend_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_friendships_user_id");

                    b.ToTable("friendships", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Domain.Entities.Consultation.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("Edited")
                        .HasColumnType("boolean")
                        .HasColumnName("edited");

                    b.Property<Guid>("Receiver")
                        .HasColumnType("uuid")
                        .HasColumnName("receiver");

                    b.Property<Guid>("Sender")
                        .HasColumnType("uuid")
                        .HasColumnName("sender");

                    b.Property<int>("Type")
                        .HasMaxLength(20)
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_messages");

                    b.HasIndex("Receiver")
                        .HasDatabaseName("ix_messages_receiver");

                    b.HasIndex("Sender")
                        .HasDatabaseName("ix_messages_sender");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Domain.Entities.Consultation.ServerEntities.Server", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BannerImagePath")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("banner_image_path");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("image_path");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_servers");

                    b.ToTable("servers", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Domain.Entities.Consultation.ServerEntities.ServerInviteUrl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AmountOfUses")
                        .HasColumnType("integer")
                        .HasColumnName("amount_of_uses");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid")
                        .HasColumnName("server_id");

                    b.Property<string>("UriParameter")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("uri_parameter");

                    b.Property<int>("Uses")
                        .HasColumnType("integer")
                        .HasColumnName("uses");

                    b.Property<DateTimeOffset?>("ValidTill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_till");

                    b.HasKey("Id")
                        .HasName("pk_server_invite_urls");

                    b.HasIndex("ServerId")
                        .HasDatabaseName("ix_server_invite_urls_server_id");

                    b.HasIndex("UriParameter")
                        .HasDatabaseName("ix_server_invite_urls_uri_parameter");

                    b.ToTable("server_invite_urls", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Domain.Entities.Consultation.ServerEntities.ServerMember", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid")
                        .HasColumnName("server_id");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("boolean")
                        .HasColumnName("is_owner");

                    b.HasKey("UserId", "ServerId")
                        .HasName("pk_server_members");

                    b.HasIndex("ServerId")
                        .HasDatabaseName("ix_server_members_server_id");

                    b.ToTable("server_members", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Domain.Entities.Consultation.ServerEntities.ServerNode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ChannelTopic")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("channel_topic");

                    b.Property<bool>("IsAgeRestricted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_age_restricted");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_private");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid")
                        .HasColumnName("server_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_server_nodes");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_server_nodes_parent_id");

                    b.HasIndex("ServerId")
                        .HasDatabaseName("ix_server_nodes_server_id");

                    b.ToTable("server_nodes", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Domain.Entities.Consultation.ServerEntities.ServerRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("name");

                    b.Property<ServerRolePermissions>("Permissions")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("permissions");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid")
                        .HasColumnName("server_id");

                    b.Property<Guid?>("ServerMemberServerId")
                        .HasColumnType("uuid")
                        .HasColumnName("server_member_server_id");

                    b.Property<Guid?>("ServerMemberUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("server_member_user_id");

                    b.HasKey("Id")
                        .HasName("pk_server_roles");

                    b.HasIndex("ServerId")
                        .HasDatabaseName("ix_server_roles_server_id");

                    b.HasIndex("ServerMemberUserId", "ServerMemberServerId")
                        .HasDatabaseName("ix_server_roles_server_member_user_id_server_member_server_id");

                    b.ToTable("server_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Domain.Entities.Consultation.ApplicationUser", b =>
                {
                    b.HasOne("DiscordClone.Domain.Entities.Consultation.ServerEntities.Server", null)
                        .WithMany("Banned")
                        .HasForeignKey("ServerId")
                        .HasConstraintName("fk_asp_net_users_servers_server_id");
                });

            modelBuilder.Entity("DiscordClone.Domain.Entities.Consultation.Friendship", b =>
                {
                    b.HasOne("DiscordClone.Domain.Entities.Consultation.ApplicationUser", "Friend")
                        .WithMany("FriendOf")
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_friendships_asp_net_users_friend_id");

                    b.HasOne("DiscordClone.Domain.Entities.Consultation.ApplicationUser", "User")
                        .WithMany("Friends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_friendships_asp_net_users_user_id");

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiscordClone.Domain.Entities.Consultation.ServerEntities.ServerInviteUrl", b =>
                {
                    b.HasOne("DiscordClone.Domain.Entities.Consultation.ServerEntities.Server", "Server")
                        .WithMany("InviteUrls")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_server_invite_urls_servers_server_id");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("DiscordClone.Domain.Entities.Consultation.ServerEntities.ServerMember", b =>
                {
                    b.HasOne("DiscordClone.Domain.Entities.Consultation.ServerEntities.Server", "Server")
                        .WithMany("Members")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_server_members_servers_server_id");

                    b.HasOne("DiscordClone.Domain.Entities.Consultation.ApplicationUser", "User")
                        .WithMany("ServerMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_server_members_users_user_id");

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiscordClone.Domain.Entities.Consultation.ServerEntities.ServerNode", b =>
                {
                    b.HasOne("DiscordClone.Domain.Entities.Consultation.ServerEntities.ServerNode", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_server_nodes_server_nodes_parent_id");

                    b.HasOne("DiscordClone.Domain.Entities.Consultation.ServerEntities.Server", "Server")
                        .WithMany("ServerNodes")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_server_nodes_servers_server_id");

                    b.Navigation("Parent");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("DiscordClone.Domain.Entities.Consultation.ServerEntities.ServerRole", b =>
                {
                    b.HasOne("DiscordClone.Domain.Entities.Consultation.ServerEntities.Server", "Server")
                        .WithMany("Roles")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_server_roles_servers_server_id");

                    b.HasOne("DiscordClone.Domain.Entities.Consultation.ServerEntities.ServerMember", null)
                        .WithMany("Roles")
                        .HasForeignKey("ServerMemberUserId", "ServerMemberServerId")
                        .HasConstraintName("fk_server_roles_server_members_server_member_user_id_server_me");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("DiscordClone.Domain.Entities.Consultation.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("DiscordClone.Domain.Entities.Consultation.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("DiscordClone.Domain.Entities.Consultation.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("DiscordClone.Domain.Entities.Consultation.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("DiscordClone.Domain.Entities.Consultation.ApplicationUser", b =>
                {
                    b.Navigation("FriendOf");

                    b.Navigation("Friends");

                    b.Navigation("ServerMembers");
                });

            modelBuilder.Entity("DiscordClone.Domain.Entities.Consultation.ServerEntities.Server", b =>
                {
                    b.Navigation("Banned");

                    b.Navigation("InviteUrls");

                    b.Navigation("Members");

                    b.Navigation("Roles");

                    b.Navigation("ServerNodes");
                });

            modelBuilder.Entity("DiscordClone.Domain.Entities.Consultation.ServerEntities.ServerMember", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("DiscordClone.Domain.Entities.Consultation.ServerEntities.ServerNode", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
